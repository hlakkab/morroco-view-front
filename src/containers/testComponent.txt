import { Ionicons } from '@expo/vector-icons';
import { NavigationProp, useNavigation } from '@react-navigation/native';
import React from 'react';
import { FlatList, StyleSheet, Text, View } from 'react-native';
import PickupCard from '../components/cards/PickupCard';
import FromToSelector from '../components/FromToSelector';
import { useAppDispatch } from '../store/hooks';
import { toggleHotelPickupBookmark } from '../store/hotelPickupSlice';
import { RootStackParamList } from '../types/navigation';
import { HotelPickup } from '../types/transport';

interface HotelPickupListContainerProps {
  pickups: HotelPickup[];
  cities: string[];
  selectedFromCity: string;
  selectedToCity: string;
  onSelectCity: (city: string, type: 'from' | 'to') => void;
  isLoading: boolean;
}

const HotelPickupListContainer: React.FC<HotelPickupListContainerProps> = ({
  pickups,
  cities,
  selectedFromCity,
  selectedToCity,
  onSelectCity,
  isLoading,
}) => {
  const dispatch = useAppDispatch();

  const handleSavePickup = (pickup: HotelPickup) => {
    dispatch(toggleHotelPickupBookmark(pickup));
  };

  // Create airport options with "Airport" suffix
  const fromOptions = [
    { id: selectedFromCity, label: selectedFromCity + ' Airport' },
    ...cities
      .filter(city => city !== selectedFromCity)
      .map(city => ({ id: city, label: city + ' Airport' }))
  ];

  // Create city options
  const toOptions = [
    { id: selectedToCity, label: selectedToCity },
    ...cities
      .filter(city => city !== selectedToCity)
      .map(city => ({ id: city, label: city }))
  ];

  const navigation = useNavigation<NavigationProp<RootStackParamList>>();

  const handleCardPress = (item: HotelPickup) => {
    navigation.navigate('TransportDetail', {
      id: item.id,
      title: item.title,
      imageUrl: item.images[0] || '',
      price: item.price,
      isPrivate: item.private,
    });
  };

  return (
    <View style={styles.container}>
      <FromToSelector
        fromOptions={fromOptions}
        toOptions={toOptions}
        selectedFromId={selectedFromCity}
        selectedToId={selectedToCity}
        onFromChange={(city: string) => onSelectCity(city, 'from')}
        onToChange={(city: string) => onSelectCity(city, 'to')}
        fromTitle="From :"
        toTitle="To :"
        fromIconName="airplane-outline"
        toIconName="location-outline"
      />

      <Text style={styles.sectionTitle}>Available pickups</Text>

      {pickups.length === 0 ? (
        <View style={styles.noPickupsContainer}>
          <Ionicons name="search-outline" size={48} color="#ccc" />
          <Text style={styles.noPickupsText}>
            No pickups available for the selected filters
          </Text>
        </View>
      ) : (
        <FlatList
          data={pickups}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <PickupCard
              item={item}
              handleSavePickup={handleSavePickup}
              handleCardPress={handleCardPress}
            />
          )}
          showsVerticalScrollIndicator={false}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 10,
    color: '#666',
  },
  noPickupsText: {
    textAlign: 'center',
    color: '#888',
    fontSize: 16,
  },
  noPickupsContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 150,
  },
});

export default HotelPickupListContainer; 


import { Ionicons } from '@expo/vector-icons';
import React, { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import FilterSelector from './FilterSelector';

interface LocationOption {
  id: string;
  label: string;
  icon?: React.ReactNode;
}

interface FromToSelectorProps {
  fromOptions: LocationOption[]; // Airport options by default
  toOptions: LocationOption[];   // City options by default
  selectedFromId: string;
  selectedToId: string;
  onFromChange: (locationId: string) => void;
  onToChange: (locationId: string) => void;
  fromTitle?: string;
  toTitle?: string;
  fromIconName?: string;
  toIconName?: string;
}

const FromToSelector: React.FC<FromToSelectorProps> = ({
  fromOptions,
  toOptions,
  selectedFromId,
  selectedToId,
  onFromChange,
  onToChange,
  fromTitle = "From :",
  toTitle = "To :",
  fromIconName = "airplane-outline",
  toIconName = "location-outline"
}) => {
  // State to track if the selectors are swapped
  const [isSwapped, setIsSwapped] = useState(false);
  
  // Add icons to options if not provided
  const addIcons = (options: LocationOption[], selectedId: string, iconName: string) => {
    return options.map(option => {
      if (option.icon) return option;
      return {
        ...option,
        icon: <Ionicons 
                name={iconName as any} 
                size={16} 
                color={selectedId === option.id ? '#fff' : '#888'} 
                style={{ marginRight: 4 }} 
              />
      };
    });
  };

  // Handle swapping between From and To locations
  const handleSwap = () => {
    setIsSwapped(!isSwapped);
    
    // Also swap the selected values when swapping displays
    const currentFromId = selectedFromId;
    const currentToId = selectedToId;
    
    onFromChange(currentToId);
    onToChange(currentFromId);
  };

  // Generate the correct options based on the swap state
  // When not swapped: Airports in "From", Cities in "To"
  // When swapped: Cities in "From", Airports in "To"
  const topOptions = isSwapped ? 
    addIcons(toOptions, selectedToId, toIconName) : 
    addIcons(fromOptions, selectedFromId, fromIconName);
    
  const bottomOptions = isSwapped ? 
    addIcons(fromOptions, selectedFromId, fromIconName) : 
    addIcons(toOptions, selectedToId, toIconName);
  
  // Handle option selection with consideration for the swapped state
  const handleTopSelection = (optionId: string) => {
    if (isSwapped) {
      onToChange(optionId);
    } else {
      onFromChange(optionId);
    }
  };
  
  const handleBottomSelection = (optionId: string) => {
    if (isSwapped) {
      onFromChange(optionId);
    } else {
      onToChange(optionId);
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.selectorSection}>
        <FilterSelector
          title={fromTitle}
          options={topOptions}
          selectedOptionId={isSwapped ? selectedToId : selectedFromId}
          onSelectOption={handleTopSelection}
          containerStyle={styles.filterContainer}
        />
      </View>

      <TouchableOpacity 
        style={styles.swapButton}
        onPress={handleSwap}
        activeOpacity={0.7}
      >
        <View style={styles.swapButtonInner}>
          <Ionicons name="swap-vertical" size={20} color="#CE1126" />
        </View>
      </TouchableOpacity>

      <View style={styles.selectorSection}>
        <FilterSelector
          title={toTitle}
          options={bottomOptions}
          selectedOptionId={isSwapped ? selectedFromId : selectedToId}
          onSelectOption={handleBottomSelection}
          containerStyle={styles.filterContainer}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 16,
  },
  selectorSection: {
    backgroundColor: '#FCEBEC',
    borderRadius: 12,
    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  filterContainer: {
    paddingVertical: 8,
  },
  swapButton: {
    alignSelf: 'center',
    marginVertical: 8,
  },
  swapButtonInner: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#FFFFFF',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    borderWidth: 1,
    borderColor: '#F0F0F0',
  },
});

export default FromToSelector; 